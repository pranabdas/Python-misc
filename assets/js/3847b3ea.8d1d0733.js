"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([[5581],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1959:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),l=["components"],i={title:"Setup",slug:"/",keywords:["python","programming","tutorial","jupyter","matplotlib","numpy","pandas","scipy","data visualization","numerical python"]},p=void 0,s={unversionedId:"setup",id:"setup",title:"Setup",description:"Installing Python 3",source:"@site/docs/setup.md",sourceDirName:".",slug:"/",permalink:"/python-tutorial/",draft:!1,editUrl:"https://github.com/pranabdas/python-tutorial/blob/main/docs/setup.md",tags:[],version:"current",frontMatter:{title:"Setup",slug:"/",keywords:["python","programming","tutorial","jupyter","matplotlib","numpy","pandas","scipy","data visualization","numerical python"]},sidebar:"docs",next:{title:"Basics",permalink:"/python-tutorial/category/basics"}},u={},c=[{value:"Installing Python 3",id:"installing-python-3",level:3},{value:"pip",id:"pip",level:3},{value:"Installing Jupyterlab",id:"installing-jupyterlab",level:3},{value:"virtualenv",id:"virtualenv",level:3},{value:"Docker",id:"docker",level:3},{value:"Intel\xae Distribution for Python",id:"intel-distribution-for-python",level:3}],m={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"installing-python-3"},"Installing Python 3"),(0,r.kt)("p",null,"If you use macOS (Big Sur/11 or higher), you should have Python 3 already\ninstalled. However, you might need to install Xcode Command Line Tools, you can\ndo that by opening Terminal and issuing following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"xcode-select --install\n")),(0,r.kt)("p",null,"You can check whether Python 3 is installed in your system or not by typing\nfollowing in a terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 --version\n")),(0,r.kt)("p",null,"If python 3 is installed, it will print the version number, otherwise you will\nsee some sort of error."),(0,r.kt)("p",null,"If you use Ubuntu/Debian, you can install Python and pip (python package\nmanager) by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt install python3 python3-pip\n")),(0,r.kt)("p",null,"If you use Windows, you can go to ",(0,r.kt)("a",{parentName:"p",href:"https://www.python.org"},"https://www.python.org"),", download and\ninstall the latest version of Python 3."),(0,r.kt)("h3",{id:"pip"},"pip"),(0,r.kt)("p",null,"We can install python packages using the ",(0,r.kt)("inlineCode",{parentName:"p"},"pip")," package manager. To install a\nspecific package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install <package-name>\npip install numpy\npip install scipy matplotlib  # install multiple packages\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note that in some operating systems, ",(0,r.kt)("inlineCode",{parentName:"p"},"pip")," is referred as ",(0,r.kt)("inlineCode",{parentName:"p"},"pip3")," specifically\nfor the version corresponding to Python 3.")),(0,r.kt)("p",null,"We can list outdated python packages by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip list --outdated\n")),(0,r.kt)("p",null,"We can update outdated python packages by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install --upgrade <package-name>\npip install --upgrade jupyterlab\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--upgrade")," flag can be used even if the package is not already installed,\nit will install the latest version. If a package is installed and a newer\nversion is available, it will upgrade to the latest version.")),(0,r.kt)("p",null,"You can install a list of python packages from a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pranabdas/python-tutorial/blob/master/requirements.txt"},"requirements.txt")," file.\nList each package name on separate line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="requirements.txt" showLineNumbers',title:'"requirements.txt"',showLineNumbers:!0},"jupyterlab\nnumpy\nscipy\nmatplotlib\n")),(0,r.kt)("p",null,"Installing a list of packages from ",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install --upgrade -r requirements.txt\n")),(0,r.kt)("h3",{id:"installing-jupyterlab"},"Installing Jupyterlab"),(0,r.kt)("p",null,"Jupyter notebook is a convenient way to run and document your python code. We\ncan install Jupyterlab by issuing following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install jupyterlab\n")),(0,r.kt)("p",null,"Now we can launch Jupyterlab by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"jupyter-lab")," in the terminal."),(0,r.kt)("h3",{id:"virtualenv"},"virtualenv"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"virtualenv")," is a powerful way to manage dependencies in a python project. We\noften need some python packages specific to a project. Therefore it is not a\ngood idea to install every python packages globally. Instead we can use\n",(0,r.kt)("inlineCode",{parentName:"p"},"virtualenv")," and keep our specific python packages local to that specific\nproject. First we need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"virtualenv")," globally though:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install --upgrade virtualenv\n")),(0,r.kt)("p",null,"Activate ",(0,r.kt)("inlineCode",{parentName:"p"},"virtualenv"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd my-project/\nvirtualenv venv\nsource venv/bin/activate\n")),(0,r.kt)("p",null,"Now we can install dependencies using ",(0,r.kt)("inlineCode",{parentName:"p"},"pip"),", and it will be stored inside the\n",(0,r.kt)("inlineCode",{parentName:"p"},"venv")," directory."),(0,r.kt)("p",null,"To leave the ",(0,r.kt)("inlineCode",{parentName:"p"},"virtualenv")," run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deactivate\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt")," to list all required python packages for a project,\nand include ",(0,r.kt)("inlineCode",{parentName:"p"},"venv")," path in the ",(0,r.kt)("inlineCode",{parentName:"p"},".gitigone"),".")),(0,r.kt)("h3",{id:"docker"},"Docker"),(0,r.kt)("p",null,"We can run our whole python setup inside a container, isolated from our main\noperating system. First you need to install ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"docker"),". Then we can build our container image\nusing ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pranabdas/python-tutorial/blob/master/Dockerfile"},"Dockerfile"),", you can\nadjust according to your needs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile",metastring:'title="Dockerfile" showLineNumbers',title:'"Dockerfile"',showLineNumbers:!0},'# Start from Ubuntu 22.04 LTS\nFROM ubuntu:jammy\n\n# Update OS\nRUN apt update && apt upgrade -y\n\n# Install software packages\nRUN apt install -y python3 python3-pip\n\n# Install pip packages\nRUN pip3 install jupyterlab numpy scipy matplotlib\n\n# jupyter-lab settings\nRUN mkdir /etc/jupyter && \\\n    (echo "c.ServerApp.ip = \'0.0.0.0\'" && \\\n     echo "c.ServerApp.allow_root = True" && \\\n     echo "c.ServerApp.open_browser = False") \\\n        >> /etc/jupyter/jupyter_server_config.py\n\n# leave in `/home` which we can map with the host\nWORKDIR /home\n')),(0,r.kt)("p",null,"Build the Docker image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t jupyter .\n")),(0,r.kt)("p",null,"Run Docker (you can either forward a specific port or if are using Linux, map\nhost network):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -ti -p 8888:8888 -v ${PWD}:/home jupyter bash\ndocker run -ti --net=host -v /host/path:/home jupyter bash\n")),(0,r.kt)("p",null,"Launch Jupyter notebook inside the container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"jupyter-lab\n")),(0,r.kt)("p",null,"Now we can create a new python 3 notebook, and start writing our python code.\nIn order to properly close a notebook, save the notebook (either from ",(0,r.kt)("em",{parentName:"p"},"File"),"\nmenu or the save icon) \u2192 ",(0,r.kt)("em",{parentName:"p"},"Close and Shutdown the Notebook")," (from ",(0,r.kt)("em",{parentName:"p"},"File")," menu),\nand finally shutdown the Jupyter server from the ",(0,r.kt)("em",{parentName:"p"},"File")," menu \u2192 ",(0,r.kt)("em",{parentName:"p"},"Shut down"),"."),(0,r.kt)("h3",{id:"intel-distribution-for-python"},"Intel","\xae"," Distribution for Python"),(0,r.kt)("p",null,"For running computational intensive tasks, you might consider using\n",(0,r.kt)("a",{parentName:"p",href:"https://www.intel.com/content/www/us/en/developer/tools/oneapi/distribution-for-python.html"},(0,r.kt)("strong",{parentName:"a"},"Intel","\xae"," Distribution for Python")),",\nwhich could be better optimized for Intel processors and perform better in some\ncases. In my experience, it is not consistently better in all scenarios."),(0,r.kt)("p",null,"Install Intel","\xae"," distribution for python:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://registrationcenter-download.intel.com/akdlm/irc_nas/19093/l_pythoni39_oneapi_p_2023.0.0.25636_offline.sh\nsudo sh ./l_pythoni39_oneapi_p_2023.0.0.25636_offline.sh -a --silent --eula accept\n")),(0,r.kt)("p",null,"If you need more tools such as TensorFlow, PyTorch, XGBoost etc., install\n",(0,r.kt)("a",{parentName:"p",href:"https://www.intel.com/content/www/us/en/developer/tools/oneapi/ai-analytics-toolkit.html"},(0,r.kt)("strong",{parentName:"a"},"Intel","\xae"," AI Analytics Toolkit")),"\ninstead (some of the packages are available as standalone downloadable component\nas well):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://registrationcenter-download.intel.com/akdlm/irc_nas/19090/l_AIKit_p_2023.0.0.26100_offline.sh\n\n# install everything bundled in the toolkit\nsudo sh ./l_AIKit_p_2023.0.0.26100_offline.sh -a --silent --eula accept\n\n# list components bundled in toolkit\nsh ./l_AIKit_p_2023.0.0.26100_offline.sh -a --list-components\n\n# install subset of components:\nsudo sh ./l_AIKit_p_2023.0.0.26100_offline.sh -a --silent --eula accept --components intel.oneapi.lin.python3:intel.oneapi.lin.tensorflow:intel.oneapi.lin.pytorch\n")),(0,r.kt)("p",null,"Initialize oneAPI environment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"source /opt/intel/oneapi/setvars.sh\n")),(0,r.kt)("p",null,"You can confirm intel python:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python --version\n")),(0,r.kt)("p",null,"You can install additional python packages via ",(0,r.kt)("inlineCode",{parentName:"p"},"pip")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"conda"),"."))}d.isMDXComponent=!0}}]);