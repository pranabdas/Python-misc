"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([[3222],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return c}});var n=a(7294);function u(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){u(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,u=function(e,t){if(null==e)return{};var a,n,u={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(u[a]=e[a]);return u}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(u[a]=e[a])}return u}var i=n.createContext({}),o=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=o(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,u=e.mdxType,l=e.originalType,i=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),d=o(a),c=u,k=d["".concat(i,".").concat(c)]||d[c]||m[c]||l;return a?n.createElement(k,p(p({ref:t},s),{},{components:a})):n.createElement(k,p({ref:t},s))}));function c(e,t){var a=arguments,u=t&&t.mdxType;if("string"==typeof e||u){var l=a.length,p=new Array(l);p[0]=d;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:u,p[1]=r;for(var o=2;o<l;o++)p[o]=a[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2360:function(e,t,a){a.d(t,{Z:function(){return p}});var n=a(7294),u=a(6010),l="tabItem_OmH5";function p(e){var t=e.children,a=e.hidden,p=e.className;return n.createElement("div",{role:"tabpanel",className:(0,u.Z)(l,p),hidden:a},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return c}});var n=a(7462),u=a(7294),l=a(2389),p=a(7392),r=a(7094),i=a(2466),o=a(6010),s="tabList_uSqn",m="tabItem_LplD";function d(e){var t,a,l,d=e.lazy,c=e.block,k=e.defaultValue,v=e.values,y=e.groupId,b=e.className,h=u.Children.map(e.children,(function(e){if((0,u.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),T=null!=v?v:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,p.l)(T,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===k?k:null!=(t=null!=k?k:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=h[0])?void 0:l.props.value;if(null!==N&&!T.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+T.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=(0,r.U)(),x=f.tabGroupChoices,I=f.setTabGroupChoices,Z=(0,u.useState)(N),O=Z[0],w=Z[1],V=[],P=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var _=x[y];null!=_&&_!==O&&T.some((function(e){return e.value===_}))&&w(_)}var R=function(e){var t=e.currentTarget,a=V.indexOf(t),n=T[a].value;n!==O&&(P(t),w(n),null!=y&&I(y,n))},E=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=V.indexOf(e.currentTarget)+1;a=V[n]||V[0];break;case"ArrowLeft":var u=V.indexOf(e.currentTarget)-1;a=V[u]||V[V.length-1]}null==(t=a)||t.focus()};return u.createElement("div",{className:(0,o.Z)("tabs-container",s)},u.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},b)},T.map((function(e){var t=e.value,a=e.label,l=e.attributes;return u.createElement("li",(0,n.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return V.push(e)},onKeyDown:E,onFocus:R,onClick:R},l,{className:(0,o.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":O===t})}),null!=a?a:t)}))),d?(0,u.cloneElement)(h.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):u.createElement("div",{className:"margin-top--md"},h.map((function(e,t){return(0,u.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function c(e){var t=(0,l.Z)();return u.createElement(d,(0,n.Z)({key:String(t)},e))}},3127:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return v},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return c}});var n=a(7462),u=a(3366),l=(a(7294),a(3905)),p=a(9877),r=a(2360),i=["components"],o={title:"List, tuple, and dictionary",sidebar_label:"List, tuple, dictionary"},s=void 0,m={unversionedId:"basics/list-tuple-dict",id:"basics/list-tuple-dict",title:"List, tuple, and dictionary",description:"List",source:"@site/docs/basics/list-tuple-dict.mdx",sourceDirName:"basics",slug:"/basics/list-tuple-dict",permalink:"/python-tutorial/basics/list-tuple-dict",draft:!1,editUrl:"https://github.com/pranabdas/python-tutorial/blob/main/docs/basics/list-tuple-dict.mdx",tags:[],version:"current",frontMatter:{title:"List, tuple, and dictionary",sidebar_label:"List, tuple, dictionary"},sidebar:"docs",previous:{title:"Get started",permalink:"/python-tutorial/basics/gs"},next:{title:"Flow control",permalink:"/python-tutorial/basics/flow-control"}},d={},c=[{value:"List",id:"list",level:3},{value:"Tuples",id:"tuples",level:3},{value:"Dictionary",id:"dictionary",level:3}],k={toc:c};function v(e){var t=e.components,a=(0,u.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"list"},"List"),(0,l.kt)("p",null,"It is a good idea to name lists as plural as they contain multiple elements. Like, ",(0,l.kt)("inlineCode",{parentName:"p"},"names"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"items")," etc."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names = ['Rupal', 'Pranab', 'Bhanu']\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Pranab', 'Bhanu']\n")))),(0,l.kt)("p",null,"Lists are mutable, we can change its contents:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names[2] = 'Nihit'\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Pranab', 'Nihit']\n")))),(0,l.kt)("p",null,"Adding new items to the list"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.append('Bhanu')\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Pranab', 'Nihit', 'Bhanu']\n")))),(0,l.kt)("p",null,"Inserting item in a specific place."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.insert(2, 'Nitin')\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Pranab', 'Nitin', 'Nihit', 'Bhanu']\n")))),(0,l.kt)("p",null,"Deleting items from list."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"del names[1]\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Nitin', 'Nihit', 'Bhanu']\n")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pop")," method of removing. ",(0,l.kt)("inlineCode",{parentName:"p"},"pop")," let you use the removed item."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"removed_name = names.pop()  # catch the removed item\nprint(names)\nprint(removed_name)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Nitin', 'Nihit']\nBhanu\n")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pop")," can remove actually any item."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.pop(1)\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"'Nitin'\n['Rupal', 'Nihit']\n")))),(0,l.kt)("p",null,"Remove an item by its value."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.remove('Rupal')\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Nihit']\n")))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If there are more than one item with same value, the ",(0,l.kt)("inlineCode",{parentName:"p"},".remove")," method removes\nonly the first occurrence."))),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.append('Rupal')\nnames.append('Nitin')\nnames.append('Nihit')\nnames.append('Bhanu')\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Nihit', 'Rupal', 'Nitin', 'Nihit', 'Bhanu']\n")))),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.remove('Nihit')\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Nitin', 'Nihit', 'Bhanu']\n")))),(0,l.kt)("p",null,"Sort lists using ",(0,l.kt)("inlineCode",{parentName:"p"},"sorted")," function (it does not change the original list)."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(sorted(names))\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Bhanu', 'Nihit', 'Nitin', 'Rupal']\n")))),(0,l.kt)("p",null,"Sort lists permanently by using ",(0,l.kt)("inlineCode",{parentName:"p"},"sort")," method."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.sort()\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Bhanu', 'Nihit', 'Nitin', 'Rupal']\n")))),(0,l.kt)("p",null,"Reverse list times using ",(0,l.kt)("inlineCode",{parentName:"p"},".reverse")," method"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names.reverse()\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Rupal', 'Nitin', 'Nihit', 'Bhanu']\n")))),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"names[2] = 'nihit'\nnames.sort()\nprint(names)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"['Bhanu', 'Nitin', 'Rupal', 'nihit']\n")))),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Beware of mixinig uppercase and lowercase letters. The methods may not work as\nyou might expect as shown above."))),(0,l.kt)("p",null,"Looping through items of a list:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for name in names:\n    print(name)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Nitin\nRupal\nnihit\n")))),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"range")," function to create numerical lists."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"nums = list(range(1, 11))\nprint(nums)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n")))),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"squares = []\nfor num in nums:\n   squares.append(num**2)\n\nfor ii in range(len(nums)):\n   print(nums[ii], '\\t', squares[ii])\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"nums     squares\n1    1\n2    4\n3    9\n4    16\n5    25\n6    36\n7    49\n8    64\n9    81\n10   100\n")))),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"even_numbers = list(range(2, 11, 2))\nprint(even_numbers)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"[2, 4, 6, 8, 10]\n")))),(0,l.kt)("p",null,"List comprehensions:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"squares = [value**2 for value in range(1, 11)]\nprint(squares)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n")))),(0,l.kt)("h3",{id:"tuples"},"Tuples"),(0,l.kt)("p",null,"Tuples are just like ",(0,l.kt)("em",{parentName:"p"},"lists")," except that they are immutable. However, we can\nupdate the whole tuple instead of individual entries. Here we use parenthesis\ninstead of square bracket to define tuples."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"tup = (1, 2, 3)\ntup[0]\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"1\n")))),(0,l.kt)("p",null,"Reassigning values would result in errors"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"tup[1] = 4 # would result in error\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"TypeError: 'tuple' object does not support item assignment\n")))),(0,l.kt)("p",null,"But we can reassign the whole tuple:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"tup = (2, 3, 4, 5)\nprint(tup)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"(2, 3, 4, 5)\n")))),(0,l.kt)("h3",{id:"dictionary"},"Dictionary"),(0,l.kt)("p",null,"Python dictionary are list of key value pairs."),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_dict = {'Pranab' : 185, 'Sasha' : 196};\nprint(my_dict)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"{'Pranab': 185, 'Sasha': 196}\n")))),(0,l.kt)("p",null,"You can get values by using it's key:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_dict['Pranab']\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"185\n")))),(0,l.kt)("p",null,"Adding new items to the dictionary:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_dict['Luis'] = 190;\nprint(my_dict)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"{'Pranab': 185, 'Sasha': 196, 'Luis': 190}\n")))),(0,l.kt)("p",null,"Reassign values:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_dict['Luis'] = 191;\nprint(my_dict)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"{'Pranab': 185, 'Sasha': 196, 'Luis': 191}\n")))),(0,l.kt)("p",null,"Delete an entry:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"del my_dict['Luis'];\nprint(my_dict)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"{'Pranab': 185, 'Sasha': 196}\n")))),(0,l.kt)("p",null,"Looping through keys and values in a dictionary:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print('Name\\t Height');\nfor key, value in my_dict.items():\n   print(key, '\\t', value);\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Name     Height\nPranab   185\nSasha    196\n")))),(0,l.kt)("p",null,"Looping through keys:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for key in my_dict.keys():\n    print(key, my_dict[key])\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Pranab 185\nSasha 196\n")))),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"if 'Pranab' in my_dict.keys():\n   print('Hello Pranab, your height is :', my_dict['Pranab'])\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"Hello Pranab, your height is : 185\n")))),(0,l.kt)("p",null,"Similarly we can loop through values also:"),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"my_dict.values()\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"dict_values([185, 196])\n")))),(0,l.kt)(p.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"input",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for value in my_dict.values():\n    print(value)\n"))),(0,l.kt)(r.Z,{value:"output",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"185\n196\n")))))}v.isMDXComponent=!0}}]);