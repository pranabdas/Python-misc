"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([[5969],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,y=u["".concat(s,".").concat(m)]||u[m]||b[m]||o;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3255:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Two dependent (y) axes using twinx",sidebar_label:"Two y-axes"},s=void 0,p={unversionedId:"matplotlib/two-y-axes",id:"matplotlib/two-y-axes",title:"Two dependent (y) axes using twinx",description:"Sometimes we need to plot two dependent variables that have very different",source:"@site/docs/matplotlib/two-y-axes.md",sourceDirName:"matplotlib",slug:"/matplotlib/two-y-axes",permalink:"/python-tutorial/matplotlib/two-y-axes",draft:!1,editUrl:"https://github.com/pranabdas/python-tutorial/blob/main/docs/matplotlib/two-y-axes.md",tags:[],version:"current",frontMatter:{title:"Two dependent (y) axes using twinx",sidebar_label:"Two y-axes"},sidebar:"docs",previous:{title:"Subplot",permalink:"/python-tutorial/matplotlib/subplot"},next:{title:"Histogram",permalink:"/python-tutorial/matplotlib/histogram"}},c={},u=[],b={toc:u},m="wrapper";function y(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)(m,(0,r.Z)({},b,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sometimes we need to plot two dependent variables that have very different\nscaling but they are the function of same independent variable. In such cases,\nwe can use two separate y-axes on both sides of the figure."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams[\"figure.dpi\"]=150\nplt.rcParams[\"figure.facecolor\"]=\"white\"\n\n# Create some mock data\nx = np.linspace(0, 10, 1000)\ny1 = np.exp(x)\ny2 = np.sin(np.pi*x) + np.sin(2*np.pi*x)\n\nfig, ax1 = plt.subplots()\n\nax1.set_xlabel('x')\nax1.set_ylabel('y1', color='tab:red')\nax1.plot(x, y1, color='tab:red')\nax1.tick_params(axis='y', labelcolor='tab:red')\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\nax2.set_ylabel('y2', color='tab:blue')  # x-label is handled with ax1\nax2.plot(x, y2, color='tab:blue')\nax2.tick_params(axis='y', labelcolor='tab:blue')\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n")),(0,o.kt)("picture",null,(0,o.kt)("source",{type:"image/webp",srcSet:n(1170).Z}),(0,o.kt)("img",{src:n(4700).Z,alt:"two-y-axes"})))}y.isMDXComponent=!0},4700:function(e,t,n){t.Z=n.p+"assets/images/two-y-axes-e8f4b9134c5401213a952fa3627cbdba.png"},1170:function(e,t,n){t.Z=n.p+"assets/images/two-y-axes-7b4186d0d6c83bab557fd77b4c9e6775.webp"}}]);