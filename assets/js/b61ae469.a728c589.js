"use strict";(self.webpackChunkpython_tutorial=self.webpackChunkpython_tutorial||[]).push([[6077],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(7294);function a(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return p}});var r=n(7462),a=n(7294),o=n(2389),l=n(8801),u=n(6010),i="tabItem_LplD";function s(e){var t,n,o,s=e.lazy,p=e.block,c=e.defaultValue,m=e.values,d=e.groupId,f=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,l.lx)(v,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===c?c:null!=(t=null!=c?c:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=h[0])?void 0:o.props.value;if(null!==g&&!v.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,l.UB)(),k=b.tabGroupChoices,w=b.setTabGroupChoices,N=(0,a.useState)(g),_=N[0],T=N[1],x=[],O=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var P=k[d];null!=P&&P!==_&&v.some((function(e){return e.value===P}))&&T(P)}var E=function(e){var t=e.currentTarget,n=x.indexOf(t),r=v[n].value;r!==_&&(O(t),T(r),null!=d&&w(d,r))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=x.indexOf(e.currentTarget)+1;n=x[r]||x[0];break;case"ArrowLeft":var a=x.indexOf(e.currentTarget)-1;n=x[a]||x[x.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":p},f)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:function(e){return x.push(e)},onKeyDown:I,onFocus:E,onClick:E},o,{className:(0,u.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":_===t})}),null!=n?n:t)}))),s?(0,a.cloneElement)(h.filter((function(e){return e.props.value===_}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}function p(e){var t=(0,o.Z)();return a.createElement(s,(0,r.Z)({key:String(t)},e))}},7729:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=n(9877),u=n(8215),i=["components"],s={title:"Python multiprocessing",sidebar_label:"Multiprocessing"},p=void 0,c={unversionedId:"multiprocessing",id:"multiprocessing",title:"Python multiprocessing",description:"Most likely the computer you are reading this has multiple processor cores. So",source:"@site/docs/multiprocessing.mdx",sourceDirName:".",slug:"/multiprocessing",permalink:"/python-tutorial/multiprocessing",editUrl:"https://github.com/pranabdas/python-tutorial/blob/main/docs/multiprocessing.mdx",tags:[],version:"current",frontMatter:{title:"Python multiprocessing",sidebar_label:"Multiprocessing"},sidebar:"docs",previous:{title:"Pandas",permalink:"/python-tutorial/pandas"},next:{title:"SQL database",permalink:"/python-tutorial/sql-database"}},m={},d=[{value:"MPI for Python",id:"mpi-for-python",level:2},{value:"MPI Examples",id:"mpi-examples",level:3},{value:"Resources",id:"resources",level:2}],f={toc:d};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Most likely the computer you are reading this has multiple processor cores. So\nfar the python programs we have written, runs on a single processor. Often part\nof our code can be distributed in parallel to multiple processor and could be\nperformed simultaneously. Here we start with an example. First, with usual\nserial processing:"),(0,o.kt)(l.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(u.Z,{value:"input",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import time\n\ndef sleep(sec):\n    time.sleep(sec)\n    return sec\n\nt0 = time.perf_counter()\n\nfor ii in range(5):\n    print(sleep(ii))\n\nt_final = time.perf_counter()\nprint("The program took", t_final - t0, "second(s).")\n'))),(0,o.kt)(u.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"0\n1\n2\n3\n4\nThe program took 10.027701000000889 second(s).\n")))),(0,o.kt)("p",null,"With multiprocessing (I am allocating two cores for below examples):"),(0,o.kt)(l.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(u.Z,{value:"input",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import concurrent.futures\n\nt0 = time.perf_counter()\n\nwith concurrent.futures.ProcessPoolExecutor() as executor:\n    results = [executor.submit(sleep, ii) for ii in range(5)]\n\n    for f in concurrent.futures.as_completed(results):\n        print(f.result())\n\nt_final = time.perf_counter()\nprint("The program took", t_final - t0, "second(s).")\n'))),(0,o.kt)(u.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"0\n1\n2\n3\n4\nThe program took 6.067244100000607 second(s).\n")))),(0,o.kt)("p",null,"We can see the performance is almost doubled while using two cores in parallel.\nWe could collect the output in a list, or convert to an array as well:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"with concurrent.futures.ProcessPoolExecutor() as executor:\n    results = [executor.submit(sleep, ii) for ii in range(5)]\n\n    result_list = []\n    for f in concurrent.futures.as_completed(results):\n        result_list.append(f.result())\n\n# convert to array\nresult_array = np.array(result_list)\n# or\nresult_array = np.vstack(result_list)\n")),(0,o.kt)("p",null,"There is another alternative way of doing the multiprocessing:"),(0,o.kt)(l.Z,{defaultValue:"input",values:[{label:"Input",value:"input"},{label:"Output",value:"output"}],mdxType:"Tabs"},(0,o.kt)(u.Z,{value:"input",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import multiprocessing\n\ndef sleep(sec, return_dict):\n    time.sleep(sec)\n    return_dict[sec] = sec\n\nt0 = time.perf_counter()\n\nif __name__ == "__main__":\n    manager = multiprocessing.Manager()\n    return_dict = manager.dict()\n    jobs = []\n    for i in range(5):\n        p = multiprocessing.Process(target=sleep, args=(i, return_dict))\n        jobs.append(p)\n        p.start()\n\n    for proc in jobs:\n        proc.join()\n\n    for key in range(5):\n        print(return_dict[key])\n\nt_final = time.perf_counter()\nprint("The program took", t_final - t0, "second(s).")\n'))),(0,o.kt)(u.Z,{value:"output",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"0\n1\n2\n3\n4\nThe program took 4.119128827000168 second(s).\n")))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We must have unique keys, if we want to collect the results in order. In some\ncases, that might not be necessary, e.g., batch processing of images."))),(0,o.kt)("h2",{id:"mpi-for-python"},"MPI for Python"),(0,o.kt)("p",null,"Installation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install mpi4py\n")),(0,o.kt)("p",null,"A python code can be run by:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mpirun -np 4 python3 code.py\n")),(0,o.kt)("h3",{id:"mpi-examples"},"MPI Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import sys\nfrom mpi4py import MPI\n\ncomm = MPI.COMM_WORLD\nid = comm.Get_rank()\np = comm.Get_size()\n\nif (id == 0):\n    print("There are ", p, "MPI processes running.")\n')),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=fKl2JW_qrso"},"https://www.youtube.com/watch?v=fKl2JW_qrso")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://mpi4py.readthedocs.io/"},"https://mpi4py.readthedocs.io/"))))}h.isMDXComponent=!0}}]);